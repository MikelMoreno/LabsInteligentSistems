# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(target = 17,
pizzas = c(2, 5, 6, 8)){
problem = list()
problem$state.initial = pizzas == 0
problem$state.final = NULL
problem$actions.possible = data.frame(include = 1:length(pizzas),
cost = 1)
problem$pizzas = pizzas
problem$target = target
return(problem)
}
# =======================================================================
# Must return TRUE or FALSE according with if the action can be done or not
# over the specific state
is.applicable = function (state,action,problem){
# result = FALSE
current = sum(problem$pizzas*state)
result = (current + problem$pizzas[action$include]) <= problem$target & state[action$include] == F
return(result)
}
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(target = 17,
pizzas = c(2, 5, 6, 8)){
problem = list()
problem$state.initial = pizzas == 0
problem$state.final = NULL
problem$actions.possible = data.frame(include = 1:length(pizzas),
cost = 1)
problem$pizzas = pizzas
problem$target = target
return(problem)
}
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
data.frame(include = 1:4, cost = 1)
pizzas = c(2,5,6,8)
pizzas == 0
pizzas == 1
pizzas == 1
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
dir("../methods")
dir("../problems")
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
# ADDITIONAL FUNCTIONS (add any used method/problem here)
source("../problems/pizza problem.R")
source("../methods/Breadth First Search.R")
source("../methods/Greedy Best First Search.R")
source("../methods/Hill Climber.R")
# And here, there are additional (needed) functions
source("../methods/Expand Node.R")
source("../methods/Analyze Results.R")
source("../methods/Plot Results.R")
# =======================================================================
# Solving of the problem (you have to adapt it)
problem   = initialize.problem(target = 100, pizzas = c(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,96))
res1 = Breadth.First.Search(problem, count.limit = 2000, graph.search = T, trace = F)
res2 = Greedy.Best.First.Search(problem, trace = T)
res3 = Hill.Climber(problem, trace = T, count.limit = 1000, count.print = 1)
analyze.results(list(res1,res2, res3),problem)
# Similar for complete state
source("../problems/pizza problem - complete.R")
problem   = initialize.problem(target = 100, pizzas = c(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,96))
res1 = Breadth.First.Search(problem, count.limit = 100, graph.search = T, trace = F)
res2 = Greedy.Best.First.Search(problem, trace = T)
res3 = Hill.Climber(problem, trace = T, count.limit = 10)
analyze.results(list(res1,res2, res3),problem)
analyze.results(list(res3), problem)
