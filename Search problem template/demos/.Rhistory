graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
library(gtools)
source("../methods/Breadth First Search.R")
source("../methods/Depth First Search.R")
source("../methods/Iterative Deepening Search.R")
source("../methods/Depth Limited Search.R")
source("../methods/Greedy Best First Search.R")
source("../methods/Uniform Cost Search.R")
source("../problems/Hanoi.R")
# And here, there are additional (needed) functions
source("../methods/Expand Node.R")
source("../methods/Analyze Results.R")
source("../methods/Plot Results.R")
# =======================================================================
# Solving of the problem (you have to adapt it)
problem   = initialize.problem(3,3)
res1 = Breadth.First.Search(problem, count.limit = 20) # yes
res2 = Breadth.First.Search(problem,graph.search = T, count.limit = 20) # yes
res3 = Depth.First.Search(problem, count.limit = 20) # no
res4 = Depth.First.Search(problem,graph.search = T, count.limit = 20) # yes
res5 = Iterative.Deepening.Search(problem, count.limit = 20) # yes
all = list(res1,res2,res3,res4,res5)
analyze.results(list(res1,res2,res3,res4,res5),problem)
analyze.results(list(res1,res2,res3,res4,res5),problem)
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
library(gtools)
source("../methods/Breadth First Search.R")
source("../methods/Depth First Search.R")
source("../methods/Iterative Deepening Search.R")
source("../methods/Depth Limited Search.R")
source("../methods/Greedy Best First Search.R")
source("../methods/Uniform Cost Search.R")
source("../problems/Hanoi.R")
# And here, there are additional (needed) functions
source("../methods/Expand Node.R")
source("../methods/Analyze Results.R")
source("../methods/Plot Results.R")
# =======================================================================
# Solving of the problem (you have to adapt it)
problem   = initialize.problem(3,3)
res1 = Breadth.First.Search(problem, count.limit = 20) # yes
res2 = Breadth.First.Search(problem,graph.search = T, count.limit = 20) # yes
res3 = Depth.First.Search(problem, count.limit = 20) # no
res4 = Depth.First.Search(problem,graph.search = T, count.limit = 20) # yes
res5 = Iterative.Deepening.Search(problem, count.limit = 20) # yes
all = list(res1,res2,res3,res4,res5)
analyze.results(list(res1,res2,res3,res4,res5),problem)
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
library(gtools)
source("../methods/Breadth First Search.R")
source("../methods/Depth First Search.R")
source("../methods/Iterative Deepening Search.R")
source("../methods/Depth Limited Search.R")
source("../methods/Greedy Best First Search.R")
source("../methods/Uniform Cost Search.R")
source("../problems/Hanoi.R")
# And here, there are additional (needed) functions
source("../methods/Expand Node.R")
source("../methods/Analyze Results.R")
source("../methods/Plot Results.R")
# =======================================================================
# Solving of the problem (you have to adapt it)
problem   = initialize.problem(3,3)
res1 = Breadth.First.Search(problem, count.limit = 20) # yes
res2 = Breadth.First.Search(problem,graph.search = T, count.limit = 20) # yes
res3 = Depth.First.Search(problem, count.limit = 20) # no
res4 = Depth.First.Search(problem,graph.search = T, count.limit = 20) # yes
res5 = Iterative.Deepening.Search(problem, count.limit = 20) # yes
all = list(res1,res2,res3,res4,res5)
analyze.results(list(res1,res2,res3,res4,res5),problem)
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
library(gtools)
source("../methods/Breadth First Search.R")
source("../methods/Depth First Search.R")
source("../methods/Iterative Deepening Search.R")
source("../methods/Depth Limited Search.R")
source("../methods/Greedy Best First Search.R")
source("../methods/Uniform Cost Search.R")
source("../problems/Hanoi.R")
# And here, there are additional (needed) functions
source("../methods/Expand Node.R")
source("../methods/Analyze Results.R")
source("../methods/Plot Results.R")
# =======================================================================
# Solving of the problem (you have to adapt it)
problem   = initialize.problem(3,3)
res1 = Breadth.First.Search(problem, count.limit = 20) # yes
res2 = Breadth.First.Search(problem,graph.search = T, count.limit = 20) # yes
res3 = Depth.First.Search(problem, count.limit = 20) # no
res4 = Depth.First.Search(problem,graph.search = T, count.limit = 20) # yes
res5 = Iterative.Deepening.Search(problem, count.limit = 20) # yes
all = list(res1,res2,res3,res4,res5)
analyze.results(list(res1,res2,res3,res4,res5),problem)
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
library(gtools)
source("../methods/Breadth First Search.R")
source("../methods/Depth First Search.R")
source("../methods/Iterative Deepening Search.R")
source("../methods/Depth Limited Search.R")
source("../methods/Greedy Best First Search.R")
source("../methods/Uniform Cost Search.R")
source("../problems/Hanoi.R")
# And here, there are additional (needed) functions
source("../methods/Expand Node.R")
source("../methods/Analyze Results.R")
source("../methods/Plot Results.R")
# =======================================================================
# Solving of the problem (you have to adapt it)
problem   = initialize.problem(3,3)
res1 = Breadth.First.Search(problem, count.limit = 20) # yes
res2 = Breadth.First.Search(problem,graph.search = T, count.limit = 20) # yes
res3 = Depth.First.Search(problem, count.limit = 20) # no
res4 = Depth.First.Search(problem,graph.search = T, count.limit = 20) # yes
res5 = Iterative.Deepening.Search(problem, count.limit = 20) # yes
all = list(res1,res2,res3,res4,res5)
analyze.results(list(res1,res2,res3,res4,res5),problem)
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
library(gtools)
source("../methods/Breadth First Search.R")
source("../methods/Depth First Search.R")
source("../methods/Iterative Deepening Search.R")
source("../methods/Depth Limited Search.R")
source("../methods/Greedy Best First Search.R")
source("../methods/Uniform Cost Search.R")
source("../problems/Hanoi.R")
# And here, there are additional (needed) functions
source("../methods/Expand Node.R")
source("../methods/Analyze Results.R")
source("../methods/Plot Results.R")
# =======================================================================
# Solving of the problem (you have to adapt it)
problem   = initialize.problem(3,3)
res1 = Breadth.First.Search(problem, count.limit = 2000) # yes
res2 = Breadth.First.Search(problem,graph.search = T, count.limit = 2000) # yes
res3 = Depth.First.Search(problem, count.limit = 2000) # no
res4 = Depth.First.Search(problem,graph.search = T, count.limit = 2000) # yes
res5 = Iterative.Deepening.Search(problem, count.limit = 2000) # yes
all = list(res1,res2,res3,res4,res5)
analyze.results(list(res1,res2,res3,res4,res5),problem)
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
library(gtools)
source("../methods/Breadth First Search.R")
source("../methods/Depth First Search.R")
source("../methods/Iterative Deepening Search.R")
source("../methods/Depth Limited Search.R")
source("../methods/Greedy Best First Search.R")
source("../methods/Uniform Cost Search.R")
source("../problems/Hanoi.R")
# And here, there are additional (needed) functions
source("../methods/Expand Node.R")
source("../methods/Analyze Results.R")
source("../methods/Plot Results.R")
# =======================================================================
# Solving of the problem (you have to adapt it)
problem_easy   = initialize.problem(3,3)
problem_medium   = initialize.problem(3,6)
problem_hard    = initialize.problem(6,6)
res1 = Breadth.First.Search(problem_easy, count.limit = 2000) # yes
res2 = Breadth.First.Search(problem_easy,graph.search = T, count.limit = 2000) # yes
res3 = Depth.First.Search(problem_easy, count.limit = 2000) # no
res4 = Depth.First.Search(problem_easy,graph.search = T, count.limit = 2000) # yes
res5 = Iterative.Deepening.Search(problem_easy, count.limit = 2000) # yes
mres1 = Breadth.First.Search(problem_medium, count.limit = 2000)
mres2 = Breadth.First.Search(problem_medium,graph.search = T, count.limit = 2000)
mres3 = Depth.First.Search(problem_medium, count.limit = 2000)
mres4 = Depth.First.Search(problem_medium,graph.search = T, count.limit = 2000)
mres5 = Iterative.Deepening.Search(problem_medium, count.limit = 2000)
hres1 = Breadth.First.Search(problem_hard, count.limit = 2000)
hres2 = Breadth.First.Search(problem_hard,graph.search = T, count.limit = 2000)
hres3 = Depth.First.Search(problem_hard, count.limit = 2000)
analyze.results(list(res1,res2,res3,res4,res5),problem_easy)
analyze.results(list(mres1,mres2,mres3,mres4,mres5),problem_medium)
analyze.results(list(hres1,hres2,hres3,hres4,hres5),problem_hard)
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
library(gtools)
source("../methods/Breadth First Search.R")
source("../methods/Depth First Search.R")
source("../methods/Iterative Deepening Search.R")
source("../methods/Depth Limited Search.R")
source("../methods/Greedy Best First Search.R")
source("../methods/Uniform Cost Search.R")
source("../problems/Hanoi.R")
# And here, there are additional (needed) functions
source("../methods/Expand Node.R")
source("../methods/Analyze Results.R")
source("../methods/Plot Results.R")
# =======================================================================
# Solving of the problem (you have to adapt it)
problem_easy   = initialize.problem(3,3)
problem_medium   = initialize.problem(3,6)
problem_hard    = initialize.problem(6,6)
res1 = Breadth.First.Search(problem_easy, count.limit = 2000) # yes
res2 = Breadth.First.Search(problem_easy,graph.search = T, count.limit = 2000) # yes
res3 = Depth.First.Search(problem_easy, count.limit = 2000) # no
res4 = Depth.First.Search(problem_easy,graph.search = T, count.limit = 2000) # yes
res5 = Iterative.Deepening.Search(problem_easy, count.limit = 2000) # yes
mres1 = Breadth.First.Search(problem_medium, count.limit = 2000)
mres2 = Breadth.First.Search(problem_medium,graph.search = T, count.limit = 2000)
mres3 = Depth.First.Search(problem_medium, count.limit = 2000)
mres4 = Depth.First.Search(problem_medium,graph.search = T, count.limit = 2000)
mres5 = Iterative.Deepening.Search(problem_medium, count.limit = 2000)
hres1 = Breadth.First.Search(problem_hard, count.limit = 2000)
hres2 = Breadth.First.Search(problem_hard,graph.search = T, count.limit = 2000)
hres3 = Depth.First.Search(problem_hard, count.limit = 2000)
hres4 = Depth.First.Search(problem_hard,graph.search = T, count.limit = 2000)
hres5 = Iterative.Deepening.Search(problem_hard, count.limit = 2000)
analyze.results(list(res1,res2,res3,res4,res5),problem_easy)
analyze.results(list(mres1,mres2,mres3,mres4,mres5),problem_medium)
analyze.results(list(hres1,hres2,hres3,hres4,hres5),problem_hard)
mres1 = Breadth.First.Search(problem_medium, count.limit = 2000)
mres2 = Breadth.First.Search(problem_medium,graph.search = T, count.limit = 2000)
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
library(gtools)
source("../methods/Breadth First Search.R")
source("../methods/Depth First Search.R")
source("../methods/Iterative Deepening Search.R")
source("../methods/Depth Limited Search.R")
source("../methods/Greedy Best First Search.R")
source("../methods/Uniform Cost Search.R")
# OUR PROBLEM
source("../problems/Hanoi.R")
# And here, there are additional (needed) functions
source("../methods/Expand Node.R")
source("../methods/Analyze Results.R") #We needed to change one small issue on this function
source("../methods/Plot Results.R")
problem_easy   = initialize.problem(3,3) #3 rods 3 disks
problem_medium   = initialize.problem(3,6) #3 rods 6 disks
problem_hard    = initialize.problem(6,6) #6 rods 6 disks
#EASY
res1 = Breadth.First.Search(problem_easy, count.limit = 2000) # yes
res2 = Breadth.First.Search(problem_easy,graph.search = T, count.limit = 2000) # yes
res3 = Depth.First.Search(problem_easy, count.limit = 2000) # no
res4 = Depth.First.Search(problem_easy,graph.search = T, count.limit = 2000) # yes
res5 = Iterative.Deepening.Search(problem_easy, count.limit = 2000) # yes
#Analyzing the results
analyze.results(list(res1,res2,res3,res4,res5),problem_easy)
initialize.problem = function(rods, disks){ # we receive (#rods, #disks)
problem = list()
problem$state.initial = seq(1,1, length.out =disks) #initial state = [1, 1, 1, ... 1[#disks]]
problem$state.final   = seq(rods, rods, length.out =disks) # final state = [#rods, #rods, ... #rods[#disks]]
problem$actions.possible = permutations(rods, 2, v=c( 1:rods) , repeats.allowed=FALSE) #actions are the possible permutations between rods
problem$name = paste0("Hanoi tower of ", rods, " rods and ", disks, " disks." )
return(problem)
}
is.applicable = function (state,action, problem){
discosXVar1 = which(state==action[1])
if(length(discosXVar1)!= 0){
pDisco1 =discosXVar1[length(discosXVar1)]
}else{
pDisco1=0
}
discosXVar2 = which(state==action[2])
if(length(discosXVar2)!= 0){
pDisco2 =discosXVar2[length(discosXVar2)]
}else{
pDisco2=0
}
if (pDisco1 > pDisco2){
result = TRUE
}else{
result = FALSE
}
# <insert code here in order to calculate result value>
return(result)
}
effect = function (state,action){
# Funciona, tal vez hay que hacer otro test mas.
# Our action is a vector of (OrigRod, DestRod)
# vectorLength = numDisks
# action <- c(1,2)
# state <- c(1,2)
i = length(state)
# we iterate over the vector from top to bottom
while (i != 0) {
if(state[i] == action[1]){ # picks up the most small disk from OrigRod
state[i] = action[2] # moves it to DestRod
break()
}else{# if disk[i]] is not in OrigRod, look for next one  <--
i = i-1
}
}
result = state
return(result)
}
# ahora hace una comparacion buena usando estos metodos. FUNCIONA
is.final.state = function (state, finalstate){
# state <- c(1,1)
# finalstate<- c(1,3)
if(all(length(state)==length(finalstate)) && all(state==finalstate)){
result = TRUE
}else{
result = FALSE
}
return(result)
}
# =======================================================================
# Must print the state in console (in a legible way)
to.string = function (state){
print(state)
}
problem_easy   = initialize.problem(3,3) #3 rods 3 disks
problem_medium   = initialize.problem(3,6) #3 rods 6 disks
problem_hard    = initialize.problem(6,6) #6 rods 6 disks
#EASY
res1 = Breadth.First.Search(problem_easy, count.limit = 2000) # yes
res2 = Breadth.First.Search(problem_easy,graph.search = T, count.limit = 2000) # yes
res3 = Depth.First.Search(problem_easy, count.limit = 2000) # no
res4 = Depth.First.Search(problem_easy,graph.search = T, count.limit = 2000) # yes
res5 = Iterative.Deepening.Search(problem_easy, count.limit = 2000) # yes
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
library(gtools)
source("../methods/Breadth First Search.R")
source("../methods/Depth First Search.R")
source("../methods/Iterative Deepening Search.R")
source("../methods/Depth Limited Search.R")
source("../methods/Greedy Best First Search.R")
source("../methods/Uniform Cost Search.R")
# OUR PROBLEM
source("../problems/Hanoi.R")
# And here, there are additional (needed) functions
source("../methods/Expand Node.R")
source("../methods/Analyze Results.R") #We needed to change one small issue on this function
source("../methods/Plot Results.R")
problem_easy   = initialize.problem(3,3) #3 rods 3 disks
problem_medium   = initialize.problem(3,6) #3 rods 6 disks
problem_hard    = initialize.problem(6,6) #6 rods 6 disks
#EASY
res1 = Breadth.First.Search(problem_easy, count.limit = 2000) # yes
res2 = Breadth.First.Search(problem_easy,graph.search = T, count.limit = 2000) # yes
res3 = Depth.First.Search(problem_easy, count.limit = 2000) # no
res4 = Depth.First.Search(problem_easy,graph.search = T, count.limit = 2000) # yes
res5 = Iterative.Deepening.Search(problem_easy, count.limit = 2000) # yes
#Analyzing the results
analyze.results(list(res1,res2,res3,res4,res5),problem_easy)
