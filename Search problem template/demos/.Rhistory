# tests para ver que pasa, si he puesto como 2000 comentarios lo siento de antemano. Mikel <3
# si lo ejecutas pinta cosas pero no encuentra una respuesta, pero no se si es por el problema o por el metodo.
data.frame(include = 1:4, cost = 1)
pizzas = c(2,5,6,8)
problem = list()
problem$state.initial = pizzas == 0 # crea un vector booleano que pone todo false, no hemos cogido ninguna pizza
problem$state.final = NULL # no hay un estado final claro, puede haber varios finales (ejemplo: 8 = una pizza de 8 o 2 pizzas de 2 y 6).
problem$state.final = NULL # no hay un estado final claro, puede haber varios finales (ejemplo: 8 = una pizza de 8 o 2 pizzas de 2 y 6).
# tests para ver que pasa, si he puesto como 2000 comentarios lo siento de antemano. Mikel <3
# si lo ejecutas pinta cosas pero no encuentra una respuesta, pero no se si es por el problema o por el metodo.
data.frame(include = 1:4, cost = 1)
pizzas = c(2,5,6,8)
state = pizzas == 0
current = sum(pizzas*state)
# tests para ver que pasa, si he puesto como 2000 comentarios lo siento de antemano. Mikel <3
# si lo ejecutas pinta cosas pero no encuentra una respuesta, pero no se si es por el problema o por el metodo.
data.frame(include = 1:4, cost = 1)
pizzas = c(2,5,6,8)
state = c(FALSE, FALSE, TRUE, FALSE)
current = sum(pizzas*state)
#compruebas con cada pizza restante desde 1 hasta "target" (pk obviamente no vas a comprobar la pizza 90 para un target de 8)
which.min(state)
#compruebas con cada pizza restante desde 1 hasta "target" (pk obviamente no vas a comprobar la pizza 90 para un target de 8)
which.max(state)
# si  "current=target" --> se termina
# si "current < target" pero no puede añadir ninguna pizza mas sin pasarte --> se termina
# tests
state = c(TRUE,TRUE,TRUE,FALSE)
current = sum(problem$pizzas*state)
(2,5,6,8)
# tests para ver que pasa, si he puesto como 2000 comentarios lo siento de antemano. Mikel <3
# si lo ejecutas pinta cosas pero no encuentra una respuesta, pero no se si es por el problema o por el metodo.
# data.frame(include = 1:4, cost = 1)
pizzas = c(2,5,6,8)
current = sum(problem$pizzas*state)
problem = list()
problem$state.initial = pizzas == 0 # crea un vector booleano que pone todo false, no hemos cogido ninguna pizza
problem$state.final = NULL # no hay un estado final claro, puede haber varios finales (ejemplo: 8 = una pizza de 8 o 2 pizzas de 2 y 6).
problem$actions.possible = data.frame(include = 1:length(pizzas), cost = 1) # cada eleccion de coger una pizza tiene un coste, el inicial es todos a 1
problem$pizzas = pizzas # lista de tipos de pizza posibles (no puedes coger 2 pizzas del mismo tipo)
problem$target = target # numero de personas, un slice por persona --> nuestro maximo de slides
initialize.problem = function(target = 17,
pizzas = c(2, 5, 6, 8)){
problem = list()
problem$state.initial = pizzas == 0 # crea un vector booleano que pone todo false, no hemos cogido ninguna pizza
problem$state.final = NULL # no hay un estado final claro, puede haber varios finales (ejemplo: 8 = una pizza de 8 o 2 pizzas de 2 y 6).
problem$actions.possible = data.frame(include = 1:length(pizzas), cost = 1) # cada eleccion de coger una pizza tiene un coste, el inicial es todos a 1
problem$pizzas = pizzas # lista de tipos de pizza posibles (no puedes coger 2 pizzas del mismo tipo)
problem$target = target # numero de personas, un slice por persona --> nuestro maximo de slides
return(problem)
}
target = 17
current = sum(problem$pizzas*state)
if (current == problem$target){
return(TRUE)
}else if(current < problem$target){
#compruebas con cada pizza restante desde 1 hasta "target" (pk obviamente no vas a comprobar la pizza 90 para un target de 8)
i = which.min(state) #nos devuelve la posicion del primer false (nos indica donde vamos)
if (i == length(state)){
return(TRUE)
}else{
return(FALSE)
}
}
problem$target = target # numero de personas, un slice por persona --> nuestro maximo de slides
if (current == problem$target){
return(TRUE)
}else if(current < problem$target){
#compruebas con cada pizza restante desde 1 hasta "target" (pk obviamente no vas a comprobar la pizza 90 para un target de 8)
i = which.min(state) #nos devuelve la posicion del primer false (nos indica donde vamos)
if (i == length(state)){
return(TRUE)
}else{
return(FALSE)
}
}
if (current == problem$target){
return(TRUE)
}else if(current < problem$target){
#compruebas con cada pizza restante desde 1 hasta "target" (pk obviamente no vas a comprobar la pizza 90 para un target de 8)
i = which.min(state) #nos devuelve la posicion del primer false (nos indica donde vamos)
if (i == length(state)){
print("true")
return(TRUE)
}else{
print("false")
return(FALSE)
}
}
if (current == problem$target){
return(TRUE)
}else if(current < problem$target){
#compruebas con cada pizza restante desde 1 hasta "target" (pk obviamente no vas a comprobar la pizza 90 para un target de 8)
i = which.min(state) #nos devuelve la posicion del primer false (nos indica donde vamos)
if (i == (length(state)-1)){
print("true")
return(TRUE)
}else{
print("false")
return(FALSE)
}
}
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
{rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
dir("../methods")
dir("../problems")
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
# ADDITIONAL FUNCTIONS (add any used method/problem here)
source("../problems/pizza problem.R")
source("../methods/Breadth First Search.R")
source("../methods/Greedy Best First Search.R")
source("../methods/Hill Climber.R")
source("../methods/LocalBeamSearch.R")
source("../methods/Random Hill Climber.R") # no lo habiamos añadido
# And here, there are additional (needed) functions
source("../methods/Expand Node.R")
source("../methods/Analyze Results.R")
source("../methods/Plot Results.R")
}
# =======================================================================
# Solving of the problem (you have to adapt it)
problem   = initialize.problem(target = 100, pizzas = c(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,96))
res1 = Breadth.First.Search(problem, count.limit = 2000, graph.search = T, trace = F)
res2 = Greedy.Best.First.Search(problem, trace = T)
res3 = Random.Hill.Climber(problem,numberofrepetitions = 10, trace = T, count.limit = 1000, count.print = 1) # no habiamos puesto RANDOM!
res4 = Local.Beam.Search(problem,count.limit=100, count.print = 100, k= 2, trace = FALSE)
res5 = Local.Beam.Search(problem,count.limit=100, count.print = 100, k= 10, trace = FALSE)
analyze.results(list(res1, res2, res3, res4, res5),problem)
source('~/GitHub/LabsInteligentSistems/Search problem template/methods/Random Hill Climber.R')
source('~/GitHub/LabsInteligentSistems/Search problem template/methods/Random Hill Climber.R')
source('~/GitHub/LabsInteligentSistems/Search problem template/methods/Random Hill Climber.R')
source('~/GitHub/LabsInteligentSistems/Search problem template/methods/Random Hill Climber.R')
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
{rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
dir("../methods")
dir("../problems")
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
# ADDITIONAL FUNCTIONS (add any used method/problem here)
source("../problems/pizza problem.R")
source("../methods/Breadth First Search.R")
source("../methods/Greedy Best First Search.R")
source("../methods/Hill Climber.R")
source("../methods/LocalBeamSearch.R")
source("../methods/Random Hill Climber.R") # no lo habiamos añadido
# And here, there are additional (needed) functions
source("../methods/Expand Node.R")
source("../methods/Analyze Results.R")
source("../methods/Plot Results.R")
}
# =======================================================================
# Solving of the problem (you have to adapt it)
problem   = initialize.problem(target = 100, pizzas = c(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,96))
res1 = Breadth.First.Search(problem, count.limit = 2000, graph.search = T, trace = F)
res2 = Greedy.Best.First.Search(problem, trace = T)
res3 = Random.Hill.Climber(problem,numberofrepetitions = 10, trace = T, count.limit = 1000, count.print = 1)
res4 = Local.Beam.Search(problem,count.limit=100, count.print = 100, k= 2, trace = FALSE)
res5 = Local.Beam.Search(problem,count.limit=100, count.print = 100, k= 10, trace = FALSE)
analyze.results(list(res1, res2, res3, res4, res5),problem)
source('~/GitHub/LabsInteligentSistems/Search problem template/methods/Random Hill Climber.R')
source('~/GitHub/LabsInteligentSistems/Search problem template/methods/Random Hill Climber.R')
source('~/GitHub/LabsInteligentSistems/Search problem template/methods/Random Hill Climber.R')
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
{rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
dir("../methods")
dir("../problems")
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
# ADDITIONAL FUNCTIONS (add any used method/problem here)
source("../problems/pizza problem.R")
source("../methods/Breadth First Search.R")
source("../methods/Greedy Best First Search.R")
source("../methods/Hill Climber.R")
source("../methods/LocalBeamSearch.R")
source("../methods/Random Hill Climber.R") # no lo habiamos añadido
# And here, there are additional (needed) functions
source("../methods/Expand Node.R")
source("../methods/Analyze Results.R")
source("../methods/Plot Results.R")
}
# =======================================================================
# Solving of the problem (you have to adapt it)
problem   = initialize.problem(target = 100, pizzas = c(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,96))
res1 = Breadth.First.Search(problem, count.limit = 2000, graph.search = T, trace = F)
res2 = Greedy.Best.First.Search(problem, trace = T)
res3 = Random.Hill.Climber(problem,numberofrepetitions = 10, trace = T, count.limit = 1000, count.print = 1)
res4 = Local.Beam.Search(problem,count.limit=100, count.print = 100, k= 2, trace = FALSE)
res5 = Local.Beam.Search(problem,count.limit=100, count.print = 100, k= 10, trace = FALSE)
analyze.results(list(res1, res2, res3, res4, res5),problem)
# Similar for complete state
source("../problems/pizza problem - complete.R")
problem   = initialize.problem(target = 100, pizzas = c(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,96))
res1 = Breadth.First.Search(problem, count.limit = 2000, graph.search = T, trace = F)
res2 = Greedy.Best.First.Search(problem, trace = T)
res3 = Random.Hill.Climber(problem,numberofrepetitions = 10, trace = T, count.limit = 1000, count.print = 1)
res4 = Local.Beam.Search(problem,count.limit=100, count.print = 100, k= 2, trace = FALSE)
res5 = Local.Beam.Search(problem,count.limit=100, count.print = 100, k= 10, trace = FALSE)
analyze.results(list(res1, res2, res3, res4, res5),problem)
source('~/GitHub/LabsInteligentSistems/Search problem template/methods/Random Hill Climber.R')
